image: 
  repository: 9mine/9mine-aws-cloud-fs
  tag: "main"
  pullPolicy: Always

initContainerImage:
  repository: 9mine/execfuse-jinja2
  tag: "master"
  pullPolicy: Always

securityContext: 
  privileged: true
  capabilities:
    add:
      - SYS_ADMIN

service:
  type: ClusterIP
  port: 3370
  
ClusterIPRange:
    from: 3371
    to: 3390

description: "awscloudfs"

fs: |
    {% include './common.j2' %}
    fs:
      # root
      "/":
        readdir: 
          sh: ls /accounts
        getattr:
          sh: *dir 
          # /<id>
        "/[0-9]+":
          name: id
          readdir: 
            list: 
            - ec2
          getattr: 
              sh: *dir
          # /<id>/.init.lua
          "/.init.lua":
            getattr:
              sh: *file
            read_file: 
              sh: |
                cat <<EOF
                   local function set_texture(entry, entity)
                       local prefix = init_path:match("/$") and init_path:sub(1, -2) or init_path
                       if not prefix then
                           return
                       end
                       local aws_textures_directory = "9mine-aws-cloud-fs"
                       local texture_prefix = "9mine-aws-cloud-fs"
                       if entry.entry_string == prefix .. "/ec2" then
                           texture.download("https://miro.medium.com/max/360/1*dfEIFZvuNC7ljFy2QNurLA.png", true,
                           texture_prefix .. "-ec2.png", aws_textures_directory)
                           entity:set_properties({
                               visual = "sprite",
                               textures = {texture_prefix .. "-ec2.png"}
                           })
                       end
                       
                       if entry.platform_string == prefix .. "/ec2/describe-instances" then
                           texture.download("https://www.pinclipart.com/picdir/middle/323-3231192_aws-simple-icons-compute-amazon-ec2-clipart.png", true,
                           texture_prefix .. "-ec2-instance.png", aws_textures_directory)
                           entity:set_properties({
                               visual = "cube",
                               textures = {texture_prefix .. "-ec2-instance.png", texture_prefix .. "-ec2-instance.png", texture_prefix .. "-ec2-instance.png", texture_prefix .. "-ec2-instance.png", texture_prefix .. "-ec2-instance.png", texture_prefix .. "-ec2-instance.png"}
                           })
                       end

                       if entry.platform_string:match(string.gsub(prefix .. "/ec2/describe-instances", "%-", "%%%-") .. "/[%d%a%p]+") then
                           texture.download("https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/AWS_Simple_Icons_AWS_Cloud.svg/1200px-AWS_Simple_Icons_AWS_Cloud.svg.png", true,
                           texture_prefix .. "-ec2-conf.png", aws_textures_directory)
                           entity:set_properties({
                               visual = "sprite",
                               textures = {texture_prefix .. "-ec2-conf.png"}
                           })
                       end
                   end
                   register.add_texture_handler(init_path .. "9mine-aws-cloud-fs", set_texture)       
                EOF
                
          # /<id>/ec2
          "/ec2":
            readdir:
              list: 
              - describe-instances
            getattr:
              sh: *dir
              # /<id>/ec2/describe-instances
            "/describe-instances":
              cache: 360
              readdir:
                sh: aws ec2 describe-instances --profile $id  | jq -r '.Reservations[].Instances[].InstanceId'
              getattr:
                sh: *dir 
              # /<id>/ec2/describe-instances/<instance>
              "/[a-z0-9_-]+":
                name: instanceid
                cache: 16000
                getattr: 
                  sh: *dir 
                readdir: 
                  sh: aws ec2 describe-instances --profile $id  | jq -r ".Reservations[].Instances[] | select (.InstanceId==\"$instanceid\")" | jq -r "keys[]"
                # /<id>/ec2/describe-instances/<instance>/<parameter>
                "/[a-zA-Z0-9_-]+":
                  name: parameter
                  getattr:
                    sh: *file
                  read_file:
                    sh: aws ec2 describe-instances --profile $id  | jq -r ".Reservations[].Instances[] | select (.InstanceId==\"$instanceid\") .\"$parameter\""



profile: |
    echo --- start of profile loading ---
    load file2chan
    load std
    ndb/cs
    for host_var in `{ os env } { '{'$host_var'}' }
    
    dir = $EXPORT_PATH
    port = $NINEP_PUBLIC_PORT
    echo $NINEP_PUBLIC_HOST > /dev/sysname 
    test -d /mnt/registry || mkdir -p /mnt/registry
    mount -A tcp!registry!registry /mnt/registry
    AWS_DIR = /tmp/aws/cmd
    test -d $AWS_DIR || mkdir -p $AWS_DIR
    load mpexpr
    fs_port = ${expr $NINEP_PUBLIC_PORT 1 +}
    file2chan $AWS_DIR^/aws {} {
        load mpexpr
        var=${expr 10 rand}
        echo new id is $var
        echo hostname is `{os hostname}
        (access_key secret_key region) = `{echo ${rget data}} 
        `{os /bin/bash -c 'mkdir -p /accounts/'^$var}
        `{os /bin/bash -c 'aws configure set aws_access_key_id '^$access_key^' --profile '^$var}
        `{os /bin/bash -c 'aws configure set aws_secret_access_key '^$secret_key^' --profile '^$var}
        `{os /bin/bash -c 'aws configure set region '^$region^' --profile '^$var}
        grid/reglisten -A -r description 'user id is '^$var tcp!*!^$fs_port { export $dir^/^$var & } &
        fs_port=${expr $fs_port 1 +}
    }
        
    grid/reglisten -A -r description ${quote $NINEP_DESCRIPTION} 'tcp!*!'^$port { export $AWS_DIR & }
    test -n $status && os pkill -9 emu-g
    echo --- end of profile loading ---